// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TEG.SSO.EFCoreContext;

namespace TEG.SSO.EFCoreContext.Migrations
{
    [DbContext(typeof(BizMasterContext))]
    partial class BizMasterContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TEG.SSO.Entity.DBModel.AppSystem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("LastUpdateAccountName")
                        .HasMaxLength(64);

                    b.Property<DateTime>("ModifyTime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SystemCode")
                        .HasMaxLength(64);

                    b.Property<string>("SystemName")
                        .HasMaxLength(64);

                    b.Property<int>("SystemType");

                    b.HasKey("ID");

                    b.ToTable("AppSystem");
                });

            modelBuilder.Entity("TEG.SSO.Entity.DBModel.AuthorizationObject", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("LastUpdateAccountName")
                        .HasMaxLength(64);

                    b.Property<int>("MenuId");

                    b.Property<DateTime>("ModifyTime");

                    b.Property<string>("ObjectCode")
                        .HasMaxLength(64);

                    b.Property<string>("ObjectName")
                        .HasMaxLength(512);

                    b.Property<int>("ObjectType");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ID");

                    b.HasIndex("MenuId");

                    b.ToTable("AuthorizationObject");
                });

            modelBuilder.Entity("TEG.SSO.Entity.DBModel.Menu", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("LastUpdateAccountName")
                        .HasMaxLength(64);

                    b.Property<string>("MenuCode")
                        .HasMaxLength(64);

                    b.Property<string>("MenuName")
                        .HasMaxLength(512);

                    b.Property<DateTime>("ModifyTime");

                    b.Property<int?>("ParentID");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SortID");

                    b.Property<int>("SystemID");

                    b.HasKey("ID");

                    b.HasIndex("ParentID");

                    b.HasIndex("SystemID");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("TEG.SSO.Entity.DBModel.Organization", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("LastUpdateAccountName")
                        .HasMaxLength(64);

                    b.Property<DateTime>("ModifyTime");

                    b.Property<string>("OrgName")
                        .HasMaxLength(64);

                    b.Property<int?>("ParentID");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ID");

                    b.HasIndex("ParentID");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("TEG.SSO.Entity.DBModel.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsSuperAdmin");

                    b.Property<string>("LastUpdateAccountName")
                        .HasMaxLength(64);

                    b.Property<DateTime>("ModifyTime");

                    b.Property<int?>("ParentID");

                    b.Property<string>("RoleName")
                        .HasMaxLength(64);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ID");

                    b.HasIndex("ParentID");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("TEG.SSO.Entity.DBModel.RoleRight", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuthorizationObjectID");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("LastUpdateAccountName")
                        .HasMaxLength(64);

                    b.Property<int?>("MenuID");

                    b.Property<DateTime>("ModifyTime");

                    b.Property<int>("PermissionValue");

                    b.Property<int>("RightType");

                    b.Property<int>("RoleID");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ID");

                    b.HasIndex("AuthorizationObjectID");

                    b.HasIndex("MenuID");

                    b.HasIndex("RoleID");

                    b.ToTable("RoleRight");
                });

            modelBuilder.Entity("TEG.SSO.Entity.DBModel.SecurityQuestion", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("LastUpdateAccountName")
                        .HasMaxLength(64);

                    b.Property<DateTime>("ModifyTime");

                    b.Property<string>("QuestionContent")
                        .HasMaxLength(512);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ID");

                    b.ToTable("SecurityQuestion");
                });

            modelBuilder.Entity("TEG.SSO.Entity.DBModel.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountName")
                        .HasMaxLength(64);

                    b.Property<DateTime>("Birthday");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Email")
                        .HasMaxLength(64);

                    b.Property<bool>("FirstChange");

                    b.Property<int>("Gender");

                    b.Property<bool>("IsDisabled");

                    b.Property<bool>("IsMemberShipPassword");

                    b.Property<bool>("IsNew");

                    b.Property<string>("LastUpdateAccountName")
                        .HasMaxLength(64);

                    b.Property<string>("Mobile")
                        .HasMaxLength(32);

                    b.Property<DateTime>("ModifyTime");

                    b.Property<string>("Password")
                        .HasMaxLength(256);

                    b.Property<int>("PasswordModifyPeriod");

                    b.Property<DateTime>("PasswordModifyTime");

                    b.Property<string>("QQ")
                        .HasMaxLength(16);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Telphone")
                        .HasMaxLength(32);

                    b.Property<string>("UserName")
                        .HasMaxLength(64);

                    b.Property<DateTime>("ValidTime");

                    b.HasKey("ID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("TEG.SSO.Entity.DBModel.UserDeptRel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateTime");

                    b.Property<int>("DeptID");

                    b.Property<string>("LastUpdateAccountName")
                        .HasMaxLength(64);

                    b.Property<DateTime>("ModifyTime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("DeptID");

                    b.HasIndex("UserID");

                    b.ToTable("UserDeptRel");
                });

            modelBuilder.Entity("TEG.SSO.Entity.DBModel.UserRoleRel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("LastUpdateAccountName")
                        .HasMaxLength(64);

                    b.Property<DateTime>("ModifyTime");

                    b.Property<int>("RoleID");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UserID");

                    b.ToTable("UserRoleRel");
                });

            modelBuilder.Entity("TEG.SSO.Entity.DBModel.UserSecurityQuestion", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("LastUpdateAccountName")
                        .HasMaxLength(64);

                    b.Property<DateTime>("ModifyTime");

                    b.Property<int>("QuestionID");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("QuestionID");

                    b.HasIndex("UserID");

                    b.ToTable("UserSecurityQuestion");
                });

            modelBuilder.Entity("TEG.SSO.Entity.DBModel.UserSessionLog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessHost")
                        .HasMaxLength(64);

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("LastUpdateAccountName")
                        .HasMaxLength(64);

                    b.Property<DateTime>("ModifyTime");

                    b.Property<DateTime>("RealExpirationTime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SystemID");

                    b.Property<string>("SystemName")
                        .HasMaxLength(64);

                    b.Property<int>("UserID");

                    b.Property<string>("UserToken")
                        .HasMaxLength(256);

                    b.Property<int>("ValidTime");

                    b.HasKey("ID");

                    b.ToTable("UserSessionLog");
                });

            modelBuilder.Entity("TEG.SSO.Entity.DBModel.AuthorizationObject", b =>
                {
                    b.HasOne("TEG.SSO.Entity.DBModel.Menu", "Menu")
                        .WithMany("AuthorizationObjects")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TEG.SSO.Entity.DBModel.Menu", b =>
                {
                    b.HasOne("TEG.SSO.Entity.DBModel.Menu", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentID");

                    b.HasOne("TEG.SSO.Entity.DBModel.AppSystem", "AppSystem")
                        .WithMany("Menus")
                        .HasForeignKey("SystemID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TEG.SSO.Entity.DBModel.Organization", b =>
                {
                    b.HasOne("TEG.SSO.Entity.DBModel.Organization", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentID");
                });

            modelBuilder.Entity("TEG.SSO.Entity.DBModel.Role", b =>
                {
                    b.HasOne("TEG.SSO.Entity.DBModel.Role", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentID");
                });

            modelBuilder.Entity("TEG.SSO.Entity.DBModel.RoleRight", b =>
                {
                    b.HasOne("TEG.SSO.Entity.DBModel.AuthorizationObject", "AuthorizationObject")
                        .WithMany("RoleRights")
                        .HasForeignKey("AuthorizationObjectID");

                    b.HasOne("TEG.SSO.Entity.DBModel.Menu", "Menu")
                        .WithMany("RoleRights")
                        .HasForeignKey("MenuID");

                    b.HasOne("TEG.SSO.Entity.DBModel.Role", "Role")
                        .WithMany("RoleRights")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TEG.SSO.Entity.DBModel.UserDeptRel", b =>
                {
                    b.HasOne("TEG.SSO.Entity.DBModel.Organization", "Dept")
                        .WithMany()
                        .HasForeignKey("DeptID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TEG.SSO.Entity.DBModel.User", "User")
                        .WithMany("UserDeptRels")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TEG.SSO.Entity.DBModel.UserRoleRel", b =>
                {
                    b.HasOne("TEG.SSO.Entity.DBModel.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TEG.SSO.Entity.DBModel.User", "User")
                        .WithMany("UserRoleRels")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TEG.SSO.Entity.DBModel.UserSecurityQuestion", b =>
                {
                    b.HasOne("TEG.SSO.Entity.DBModel.SecurityQuestion", "SecurityQuestion")
                        .WithMany("UserSecurityQuestions")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TEG.SSO.Entity.DBModel.User", "User")
                        .WithMany("UserSecurityQuestions")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
